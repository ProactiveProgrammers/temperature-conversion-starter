setup: |
  cd converter && poetry install
  echo "Done installing project dependencies!"
---

# Reminder for ^^^:
# All commands executed in the setup block are done in a
# one-by-one fashion from the current working directory. This means
# that there is no history associated with running the commands and
# thus multiple commands must be run in a single chain.

# --> check the Python program
- converter/converter/main.py:
  - description: Ensure that the main.py file exists in the converter/converter directory
    check: ConfirmFileExists
  - description: Complete all TODOs, remove the TODO markers in the main.py
    check: MatchFileFragment
    options:
      fragment: TODO
      count: 0
      exact: true
  - description: Create a sufficient number of docstring (i.e., multiple-line) comments in main.py
    check: CountMultipleLineComments
    options:
      language: "Python"
      count: 2
      exact: false
  - description: Create a sufficient number of single-line comments in main.py
    check: CountSingleLineComments
    options:
      language: "Python"
      count: 6
      exact: false

# --> check the Python program
- converter/converter/convert.py:
  - description: Ensure that the convert.py file exists in the converter/converter directory
    check: ConfirmFileExists
  - description: Complete all TODOs, remove the TODO markers in the main.py
    check: MatchFileFragment
    options:
      fragment: TODO
      count: 0
      exact: true
  - description: Create a sufficient number of docstring (i.e., multiple-line) comments in convert.py
    check: CountMultipleLineComments
    options:
      language: "Python"
      count: 4
      exact: false
  - description: Create a sufficient number of single-line comments in convert.py
    check: CountSingleLineComments
    options:
      language: "Python"
      count: 4
      exact: false

# --> check the Python program
- converter/converter/units.py:
  - description: Ensure that the convert.py file exists in the converter/converter directory
    check: ConfirmFileExists
  - description: Complete all TODOs, remove the TODO markers in the units.py
    check: MatchFileFragment
    options:
      fragment: TODO
      count: 0
      exact: true
  - description: Create a sufficient number of docstring (i.e., multiple-line) comments in units.py
    check: CountMultipleLineComments
    options:
      language: "Python"
      count: 1
      exact: false
  - description: Create a sufficient number of single-line comments in units.py
    check: CountSingleLineComments
    options:
      language: "Python"
      count: 2
      exact: false

# --> check the Python program
- converter/tests/test_convert.py:
  - description: Ensure that the test_convert.py file exists in the converter/tests directory
    check: ConfirmFileExists
  - description: Complete all TODOs, remove the TODO markers in the test_convert.py
    check: MatchFileFragment
    options:
      fragment: TODO
      count: 0
      exact: true
  - description: Ensure the existence of a sufficient number of tests in test_convert.py
    check: MatchFileFragment
    options:
      fragment: TODO
      count: 0
      exact: true
  - description: Create a sufficient number of docstring (i.e., multiple-line) comments in test_convert.py
    check: CountMultipleLineComments
    options:
      language: "Python"
      count: 7
      exact: false
  - description: Create a sufficient number of single-line comments in test_convert.py
    check: CountSingleLineComments
    options:
      language: "Python"
      count: 7
      exact: false

- writing/reflection.md:
  - description: Ensure that reflection.md file exists in the writing/ directory
    check: ConfirmFileExists
  - description: Write a minimum number of meaningful words in the reflection
    check: CountFileWords
    options:
      count: 250
      exact: false
  - description: Confirm that the markdown file has the correct number of headers
    check: CountMarkdownTags
    options:
      tag: heading
      count: 14
      exact: true
  - description: Confirm that the markdown file has the correct number of code blocks
    check: CountMarkdownTags
    options:
      tag: code_block
      count: 6
      exact: true
  - description: Complete all TODOs, remove the TODO markers in the reflection.md
    check: MatchFileFragment
    options:
      fragment: TODO
      count: 0
      exact: true
  - description: Delete the 'Add Your Name Here' prompt in the reflection file
    check: MatchFileFragment
    options:
      fragment: "Add Your Name Here"
      count: 0
      exact: true

# count number of commits in the GitHub repository
- description: Have at least a specific minimum number of commits (5) in repository
  check: CountCommits
  options:
    count: 5

# run the program and confirm correct number of lines in the output
- description: Run the program and confirm the correct number of non-blank lines in the output
  check: CountCommandOutput
  options:
    command: 'cd converter && poetry run converter --from-unit Celsius --to-unit Fahrenheit --temperature 22'
    count: 2
    exact: true

# run the program and confirm correct number of lines in the output
- description: Run the program and confirm the correct number of non-blank lines in the output
  check: CountCommandOutput
  options:
    command: 'cd converter && poetry run converter --from-unit Fahrenheit --to-unit Celsius --temperature 71.6'
    count: 2
    exact: true

# run a command
- description: Pass the source code formatting checks run by black
  command: cd converter && poetry run task black

# run a command
- description: Pass the linting checks run by flake8
  command: cd converter && poetry run task flake8

# run a command
- description: Pass the import checks run by isort
  command: cd converter && poetry run task isort

# run a command
- description: Pass the linting checks run by mypy
  command: cd converter && poetry run task mypy

# run a command
- description: Pass the linting checks run by pydocstyle
  command: cd converter && poetry run task pydocstyle

# run a command
- description: Pass the linting checks run by pylint
  command: cd converter && poetry run task pylint

# run a command
- description: Pass the linting checks run by pymarkdown
  command: cd converter && poetry run task markdownlint

# run a command
- description: Pass all of the Pytest test cases
  command: cd converter && poetry run task test
